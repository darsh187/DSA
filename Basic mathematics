#include <bits/stdc++.h>
using namespace std;

int counting(int n)
{
    int count = 0;
    while(n > 0)
    {
        count = count + 1;
        n = n / 10;
    }
    return count;
}
int revNum(int n)
{
    int rev = 0;
    while(n > 0)
    {
        int lastdigit = n % 10;
        rev = (rev * 10) + lastdigit;
        n = n / 10;
    }
    return rev;
}
int checkPalindrome(int n)
{
    int ogNum = n;
    int rev = 0;
    while(n > 0)
    {
        int lastdigit = n % 10;
        rev = (rev * 10) + lastdigit;
        n = n / 10;
    }
    if(rev == ogNum) return true;
    else return false;
}
int isArmStrongNum(int n)
{
    int dup = n;
    int sum = 0;
    while(n > 0)
    {
        int lastdigit = n % 10;
        sum = sum + (lastdigit*lastdigit*lastdigit);
        n = n / 10;
    }
    if(sum == dup) return true;
    else return false;
}
void allDivisors(int n)
{
    vector<int> ls;
    for(int i = 1; i <= sqrt(n); i++)
    {
        if(n % i == 0)
        {
            ls.push_back(i);
            if(n/i != i)
            {
                ls.push_back(n/i);
            }
        }
    }
    sort(ls.begin(), ls.end());
    for(auto it: ls)
    {
        cout << it << " ";
    }
}
int isPrime(int n)
{
    int cnt = 0;
    for(int i = 1; i*i <= n; i++)// same as sqrt
    {
        if(n % i == 0){
            cnt++;
            if(n % i != i){
                cnt++;
            }
        }
    }
    if(cnt == 2) return 1;
    else return 0;
}
int eugcd(int a, int b)
{
    while(a > 0 && b > 0)
    {
        if(a > b) a = a % b;
        else b =  b % a;
    }
    if (a == 0) return b;
    else return a;
}
int main()
{
    // int m;
    // cin >> m;  
    int a,b;
    cin >> a >> b;
    // int x = counting(m);
    // int x = revNum(m);
    // int x = checkPalindrome(m);
    // int x = isArmStrongNum(m);
    // allDivisors(m);
    // int x = isPrime(m);
    int x = eugcd(a, b);
    cout << x;
    return 0;
}
